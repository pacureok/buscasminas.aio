<meta>
project_name = "Buscaminas Aio Masterpiece",
version = "1.0.0",
author = "TuNombre",
output_dir = "build", # Generar√° los archivos en una carpeta 'build'
# Dependencias imaginarias si nuestro int√©rprete las manejara
js_deps = ["none"],
python_deps = ["none"],
</meta>
<np>

<video>
  <h1>Buscaminas Aio</h1>
  <div class="header">
    <button id="reset-button">Reiniciar</button>
    <div id="status-message"></div>
  </div>
  <div id="tablero"></div>
</video>
<np>

<cs>
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  text-align: center;
  background-color: #2c3e50;
  color: #ecf0f1;
  margin: 20px;
}
.header {
  margin-bottom: 20px;
}
#tablero {
  display: grid;
  grid-template-columns: repeat(10, 35px);
  grid-template-rows: repeat(10, 35px);
  width: fit-content;
  margin: auto;
  border: 4px solid #34495e;
  border-right-color: #7f8c8d;
  border-bottom-color: #7f8c8d;
}
.celda {
  width: 35px;
  height: 35px;
  border: 2px solid;
  border-color: #7f8c8d #bdc3c7 #bdc3c7 #7f8c8d;
  background-color: #95a5a6;
  font-size: 20px;
  font-weight: bold;
  line-height: 30px;
  text-align: center;
  cursor: pointer;
}
.celda.revelada {
  border-color: #34495e;
  background-color: #bdc3c7;
  cursor: default;
}
.celda.revelada.bomba {
  background-color: #e74c3c;
  color: white;
}
.celda.flagged {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="35" height="35"><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="24" fill="red">üö©</text></svg>');
  background-size: cover;
  background-color: #f1c40f;
}
.numero-1 { color: blue; }
.numero-2 { color: green; }
.numero-3 { color: red; }
.numero-4 { color: purple; }
.numero-5 { color: maroon; }
.numero-6 { color: teal; }
.numero-7 { color: black; }
.numero-8 { color: gray; }

#reset-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: #2ecc71;
  color: white;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}
#reset-button:hover {
  background-color: #27ae60;
}
#status-message {
  font-size: 24px;
  margin-top: 15px;
  min-height: 30px;
}
</cs>
<np>

<tp>
const tablero = document.getElementById('tablero');
const resetButton = document.getElementById('reset-button');
const statusMessage = document.getElementById('status-message');
const ancho = 10;
const numeroBombas = 15;
let celdas = [];
let gameOver = false;
let banderasRestantes = numeroBombas;

function crearTablero() {
  gameOver = false;
  statusMessage.textContent = '';
  statusMessage.style.color = 'white';
  tablero.innerHTML = '';
  celdas = [];
  banderasRestantes = numeroBombas;

  const arrayBombas = Array(numeroBombas).fill('bomba');
  const arrayVacio = Array(ancho * ancho - numeroBombas).fill('valido');
  const arrayJuego = arrayVacio.concat(arrayBombas).sort(() => Math.random() - 0.5);

  for (let i = 0; i < ancho * ancho; i++) {
    const celda = document.createElement('div');
    celda.classList.add('celda');
    celda.setAttribute('id', i);
    celda.dataset.tipo = arrayJuego[i];
    tablero.appendChild(celda);
    celdas.push(celda);
  }
  
  for (let i = 0; i < celdas.length; i++) {
    let cuentaBombas = 0;
    const isLeftEdge = (i % ancho === 0);
    const isRightEdge = (i % ancho === ancho - 1);

    if (celdas[i].dataset.tipo === 'valido') {
      if (i > 0 && !isLeftEdge && celdas[i-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < 99 && !isRightEdge && celdas[i+1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i >= ancho && celdas[i-ancho].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < (ancho * ancho - ancho) && celdas[i+ancho].dataset.tipo === 'bomba') cuentaBombas++;
      if (i > ancho && !isLeftEdge && celdas[i-ancho-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i > (ancho -1) && !isRightEdge && celdas[i-ancho+1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < (ancho * ancho - ancho) && !isLeftEdge && celdas[i+ancho-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i <= (ancho * ancho - ancho - 2) && !isRightEdge && celdas[i+ancho+1].dataset.tipo === 'bomba') cuentaBombas++;

      if (cuentaBombas > 0) {
        celdas[i].textContent = cuentaBombas;
        celdas[i].classList.add(`numero-${cuentaBombas}`);
      }
    }
  }

  celdas.forEach(celda => {
    celda.addEventListener('click', () => {
      revelarCelda(celda);
    });
    celda.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      marcarCelda(celda);
    });
  });
}

function revelarCelda(celda) {
  if (gameOver || celda.classList.contains('revelada') || celda.classList.contains('flagged')) return;
  
  if (celda.dataset.tipo === 'bomba') {
    mostrarBombas();
    statusMessage.textContent = '¬°Game Over! ‚ùåüö´';
    statusMessage.style.color = '#e74c3c';
    gameOver = true;
    return;
  }
  
  celda.classList.add('revelada');
  if (celda.textContent === '') {
    const id = parseInt(celda.id);
    setTimeout(() => {
      revelarAdyacentes(id);
    }, 10);
  }
  verificarVictoria();
}

function revelarAdyacentes(id) {
  const isLeftEdge = (id % ancho === 0);
  const isRightEdge = (id % ancho === ancho - 1);
  const vecinos = [
    id - 1, id + 1, id - ancho, id + ancho, id - ancho - 1, id - ancho + 1, id + ancho - 1, id + ancho + 1
  ];

  vecinos.forEach(vecinoId => {
    if (vecinoId >= 0 && vecinoId < (ancho * ancho)) {
      if ((isLeftEdge && [id - 1, id - ancho - 1, id + ancho - 1].includes(vecinoId)) ||
          (isRightEdge && [id + 1, id - ancho + 1, id + ancho + 1].includes(vecinoId))) {
        return;
      }
      const vecinoCelda = celdas[vecinoId];
      if (!vecinoCelda.classList.contains('revelada') && !vecinoCelda.classList.contains('flagged')) {
        revelarCelda(vecinoCelda);
      }
    }
  });
}

function marcarCelda(celda) {
  if (gameOver) return;
  if (celda.classList.contains('revelada')) return;

  if (!celda.classList.contains('flagged') && banderasRestantes > 0) {
    celda.classList.add('flagged');
    banderasRestantes--;
  } else if (celda.classList.contains('flagged')) {
    celda.classList.remove('flagged');
    banderasRestantes++;
  }
}

function mostrarBombas() {
  celdas.forEach(celda => {
    if (celda.dataset.tipo === 'bomba') {
      celda.classList.add('revelada', 'bomba');
    }
  });
}

function verificarVictoria() {
  const celdasNoBombas = celdas.filter(celda => celda.dataset.tipo === 'valido');
  const celdasReveladasNoBombas = celdasNoBombas.filter(celda => celda.classList.contains('revelada'));

  if (celdasReveladasNoBombas.length === celdasNoBombas.length) {
    statusMessage.textContent = '¬°Victoria! üéâ';
    statusMessage.style.color = '#2ecc71';
    gameOver = true;
    mostrarBombas();
  }
}

resetButton.addEventListener('click', crearTablero);
crearTablero();
</tp>
<np>

(esp)
# L√≥gica principal del juego para el motor (esp).
# Este bloque demuestra c√≥mo la l√≥gica del juego podr√≠a ser abstracta aqu√≠.

$creafuntion "configurar_juego" &intert 
(
  tablero_ancho = 10,
  tablero_alto = 10,
  num_bombas = 15
),

$inter=rule(berific_estado_juego (pin= "victoria" "derrota" "jugando")),

@decte (pin= "victoria" of accion "estado_juego"=run mostrar_mensaje_victoria {</video> mensaje_victoria "¬°Has ganado!"}),
@decte (pin= "derrota" of accion "estado_juego"=run mostrar_mensaje_derrota {</video> mensaje_derrota "¬°Boom! Perdiste."}),
@decte (pin= "jugando" of accion "estado_juego"=run actualizar_estado_ui {</video> actualiza_ui_juego}),

$creafuntion "reset_juego_externo" &intert (<tp>resetButton.click();</tp>),
@decte (evento_tecla= [R] of accion "reset_juego_externo"=run "reset_juego_externo" {</video>}),

$creafuntion "obtener_numero_bombas" &intert (retorno = 15),
(/esp)
<np>

<ING>
# Main game logic for the (ING) engine.
# This block shows parallel syntax for English commands.

$create_function "configure_game" &insert 
(
  board_width = 10,
  board_height = 10,
  num_mines = 15
),

$inter=rule(verify_game_state (pin= "win" "lose" "playing")),

@detect (pin= "win" of action "game_state"=run show_win_message {</video> win_message "You won!"}),
@detect (pin= "lose" of action "game_state"=run show_lose_message {</video> lose_message "Boom! You lost."}),
@detect (pin= "playing" of action "game_state"=run update_game_ui {</video> update_ui_game}),

$create_function "external_game_reset" &insert (<tp>resetButton.click();</tp>),
@detect (key_event= [R] of action "external_game_reset"=run "external_game_reset" {</video>}),

$create_function "get_number_of_mines" &insert (return_value = 15),
</ING>
<np>

(pat)
# Definici√≥n de estados del juego
$state "Game_Initializing",
$state "Playing_Game",
$state "Player_Won",
$state "Player_Lost",

# Tarea de inicio del juego
$task "Start_New_Game",
    # Llamamos a una funci√≥n JavaScript para resetear el tablero
    run_logic_from_esp { $creafuntion "resetear_tablero_js" &intert (<tp>crearTablero();</tp>), },
    set_game_state "Playing_Game",
    log_message "Juego iniciado. ¬°Buena suerte!",
    play_sound "game_start.wav",

# Eventos y transiciones de estado
@on_event "celda_bomba_revelada",
    transition_to_state "Player_Lost",
    log_message "¬°Bomba! Juego terminado.",
    play_sound "explosion_sound.mp3",
    run_logic_from_esp { $creafuntion "mostrar_pantalla_gameover" &intert (<tp>statusMessage.textContent = '¬°Game Over! ‚ùåüö´'; statusMessage.style.color = '#e74c3c';</tp>), },

@on_event "todas_celdas_seguras_reveladas",
    transition_to_state "Player_Won",
    log_message "¬°Felicidades! Has ganado.",
    play_sound "victory_tune.mp3",
    run_logic_from_esp { $creafuntion "mostrar_pantalla_victoria" &intert (<tp>statusMessage.textContent = '¬°Victoria! üéâ'; statusMessage.style.color = '#2ecc71';</tp>), },

# Ejemplo de un patr√≥n de secuencia de animaci√≥n
$define_pattern "Explosion_Sequence",
    play_animation "explosion_frame_1",
    wait_time (seconds=0.1),
    play_animation "explosion_frame_2",
    wait_time (seconds=0.1),
    play_animation "explosion_frame_3",
    end_pattern,
(/pat)
<np>

<net>
// C√≥digo C# para .NET.
// Podr√≠a ser un backend para el Buscaminas si fuera multijugador,
// o para una l√≥gica compleja de generaci√≥n de mapas.

using System;
using System.Collections.Generic;

namespace MinesweeperAioBackend
{
    public class GameState
    {
        public int BoardWidth { get; set; } = 10;
        public int BoardHeight { get; set; } = 10;
        public int NumberOfMines { get; set; } = 15;
        public List<Tuple<int, int>> MineLocations { get; set; }

        public GameState()
        {
            MineLocations = new List<Tuple<int, int>>();
            PlaceMines();
        }

        private void PlaceMines()
        {
            Random rand = new Random();
            while (MineLocations.Count < NumberOfMines)
            {
                int x = rand.Next(0, BoardWidth);
                int y = rand.Next(0, BoardHeight);
                Tuple<int, int> newMine = new Tuple<int, int>(x, y);

                if (!MineLocations.Contains(newMine))
                {
                    MineLocations.Add(newMine);
                }
            }
            Console.WriteLine($"Backend .NET: {MineLocations.Count} minas colocadas.");
        }

        public string GetMineLocationsJson()
        {
            return $"Minas: {string.Join(", ", MineLocations)}";
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Iniciando componente .NET del Buscaminas Aio.");
            GameState game = new GameState();
            Console.WriteLine(game.GetMineLocationsJson());
        }
    }
}
</net>
<np>

<lua>
-- C√≥digo Lua para scripts ligeros o configuraci√≥n de niveles.

local config = {
    difficulty = "normal",
    board_size = {width = 10, height = 10},
    mine_percentage = 0.15
}

function get_difficulty_mines(size, percentage)
    return math.floor(size.width * size.height * percentage)
end

local mines_for_current_difficulty = get_difficulty_mines(config.board_size, config.mine_percentage)

print("Componente Lua del Buscaminas Aio iniciado.")
print("Dificultad seleccionada: " .. config.difficulty)
print("N√∫mero de minas calculado por Lua: " .. mines_for_current_difficulty)

function get_game_config()
    return config
end
</lua>
<np>

<rs>
// C√≥digo Rust. Ideal para l√≥gica de alto rendimiento o simulaciones.
// Podr√≠a ser un motor de IA para el Buscaminas o un generador de mapas m√°s complejo.

fn main() {
    println!("Iniciando componente Rust del Buscaminas Aio.");
    let board_size: usize = 10;
    let num_mines: usize = 15;

    let mut mines_placed = 0;
    let mut mine_map = vec![vec![false; board_size]; board_size];
    
    // Simulaci√≥n de colocaci√≥n de minas (conceptual, no aleatorio aqu√≠)
    while mines_placed < num_mines {
        let x = (mines_placed * 3) % board_size;
        let y = (mines_placed * 2) % board_size;
        if !mine_map[x][y] {
            mine_map[x][y] = true;
            mines_placed += 1;
        }
    }
    println!("Rust: {} minas simuladas en el mapa.", mines_placed);
}

// Funci√≥n de ejemplo que podr√≠a exportarse a C/C++ o a un sistema de script
#[no_mangle]
pub extern "C" fn calculate_safe_cells(total_cells: i32, mines: i32) -> i32 {
    total_cells - mines
}
</rs>
<np>

<go>
// C√≥digo Go. Genial para servicios de red, APIs, o procesamiento concurrente.
// Podr√≠a ser un microservicio para guardar puntajes o para la interacci√≥n multijugador.

package main

import (
	"fmt"
	"time"
)

func main() {
	fmt.Println("Iniciando componente Go del Buscaminas Aio.")
	// Simulaci√≥n de un proceso de backend concurrente
	go func() {
		for i := 0; i < 3; i++ {
			time.Sleep(time.Second)
			fmt.Println("Go: Procesando datos de juego en segundo plano...")
		}
		fmt.Println("Go: El servidor de juego simulado est√° escuchando (conceptual).")
		// En un caso real, aqu√≠ ir√≠a la l√≥gica de un servidor HTTP o gRPC.
	}()

	fmt.Println("Go: El servidor de juego simulado est√° escuchando (conceptual).")
	// En un caso real, aqu√≠ ir√≠a la l√≥gica de un servidor HTTP o gRPC.
}

// Funci√≥n de ejemplo para calcular el tiempo de juego
func CalculateGameTime(startTime, endTime time.Time) time.Duration {
    return endTime.Sub(startTime)
}
</go>
<np>

<sql>
-- C√≥digo SQL. Para definir la estructura de la base de datos o ejecutar consultas.
-- Esto ser√≠a para almacenar puntajes, configuraciones de usuario, etc.

-- Creaci√≥n de la tabla de puntajes altos
CREATE TABLE IF NOT EXISTS high_scores (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    player_name TEXT NOT NULL,
    score INTEGER NOT NULL,
    game_date DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Inserci√≥n de un puntaje de ejemplo
INSERT INTO high_scores (player_name, score) VALUES ('HeroeAio', 12345);
INSERT INTO high_scores (player_name, score) VALUES ('MinaMaestro', 9876);

-- Consulta para obtener los 5 puntajes m√°s altos
SELECT player_name, score FROM high_scores ORDER BY score DESC LIMIT 5;

-- Actualizaci√≥n de un puntaje
UPDATE high_scores SET score = 15000 WHERE player_name = 'HeroeAio';
</sql>
