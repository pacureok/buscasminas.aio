<meta>
project_name = "Buscaminas Aio",
version = "1.0.0",
author = "TuNombre",
output_dir = "build"
</meta>

<crea>
# Crear un directorio para las imágenes del juego (si lo necesitas)
$crea=file Name="Mi_Directorio_de_Imagenes" %Not_extencion
</crea>

<video>
  <h1>Buscaminas Aio</h1>
  <div class="header">
    <button id="reset-button">Reiniciar</button>
    <div id="status-message"></div>
  </div>
  <div id="tablero"></div>
</video>

<cs>
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  text-align: center;
  background-color: #2c3e50;
  color: #ecf0f1;
  margin: 20px;
}
.header {
  margin-bottom: 20px;
}
#tablero {
  display: grid;
  grid-template-columns: repeat(10, 35px);
  grid-template-rows: repeat(10, 35px);
  width: fit-content;
  margin: auto;
  border: 4px solid #34495e;
  border-right-color: #7f8c8d;
  border-bottom-color: #7f8c8d;
}
.celda {
  width: 35px;
  height: 35px;
  border: 2px solid;
  border-color: #7f8c8d #bdc3c7 #bdc3c7 #7f8c8d;
  background-color: #95a5a6;
  font-size: 20px;
  font-weight: bold;
  line-height: 30px;
  text-align: center;
  cursor: pointer;
}
.celda.revelada {
  border-color: #34495e;
  background-color: #bdc3c7;
  cursor: default;
}
.celda.revelada.bomba {
  background-color: #e74c3c;
  color: white;
}
.celda.flagged {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="35" height="35"><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="24" fill="red">🚩</text></svg>');
  background-size: cover;
  background-color: #f1c40f;
}
.numero-1 { color: blue; }
.numero-2 { color: green; }
.numero-3 { color: red; }
.numero-4 { color: purple; }
.numero-5 { color: maroon; }
.numero-6 { color: teal; }
.numero-7 { color: black; }
.numero-8 { color: gray; }

#reset-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: #2ecc71;
  color: white;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}
#reset-button:hover {
  background-color: #27ae60;
}
#status-message {
  font-size: 24px;
  margin-top: 15px;
  min-height: 30px;
}
</cs>

<tp>
const tablero = document.getElementById('tablero');
const resetButton = document.getElementById('reset-button');
const statusMessage = document.getElementById('status-message');
const ancho = 10;
const numeroBombas = 15;
let celdas = [];
let gameOver = false;
let banderasRestantes = numeroBombas;

function crearTablero() {
  gameOver = false;
  statusMessage.textContent = '';
  statusMessage.style.color = 'white';
  tablero.innerHTML = '';
  celdas = [];
  banderasRestantes = numeroBombas;

  const arrayBombas = Array(numeroBombas).fill('bomba');
  const arrayVacio = Array(ancho * ancho - numeroBombas).fill('valido');
  const arrayJuego = arrayVacio.concat(arrayBombas).sort(() => Math.random() - 0.5);

  for (let i = 0; i < ancho * ancho; i++) {
    const celda = document.createElement('div');
    celda.classList.add('celda');
    celda.setAttribute('id', i);
    celda.dataset.tipo = arrayJuego[i];
    tablero.appendChild(celda);
    celdas.push(celda);
  }
  
  for (let i = 0; i < celdas.length; i++) {
    let cuentaBombas = 0;
    const isLeftEdge = (i % ancho === 0);
    const isRightEdge = (i % ancho === ancho - 1);

    if (celdas[i].dataset.tipo === 'valido') {
      if (i > 0 && !isLeftEdge && celdas[i-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < 99 && !isRightEdge && celdas[i+1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i >= ancho && celdas[i-ancho].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < (ancho * ancho - ancho) && celdas[i+ancho].dataset.tipo === 'bomba') cuentaBombas++;
      if (i > ancho && !isLeftEdge && celdas[i-ancho-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i > (ancho -1) && !isRightEdge && celdas[i-ancho+1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i < (ancho * ancho - ancho) && !isLeftEdge && celdas[i+ancho-1].dataset.tipo === 'bomba') cuentaBombas++;
      if (i <= (ancho * ancho - ancho - 2) && !isRightEdge && celdas[i+ancho+1].dataset.tipo === 'bomba') cuentaBombas++;

      if (cuentaBombas > 0) {
        celdas[i].textContent = cuentaBombas;
        celdas[i].classList.add(`numero-${cuentaBombas}`);
      }
    }
  }

  celdas.forEach(celda => {
    celda.addEventListener('click', () => {
      revelarCelda(celda);
    });
    celda.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      marcarCelda(celda);
    });
  });
}

function revelarCelda(celda) {
  if (gameOver || celda.classList.contains('revelada') || celda.classList.contains('flagged')) return;
  
  if (celda.dataset.tipo === 'bomba') {
    mostrarBombas();
    statusMessage.textContent = '¡Game Over! ❌🚫';
    statusMessage.style.color = '#e74c3c';
    gameOver = true;
    return;
  }
  
  celda.classList.add('revelada');
  if (celda.textContent === '') {
    const id = parseInt(celda.id);
    setTimeout(() => {
      revelarAdyacentes(id);
    }, 10);
  }
  verificarVictoria();
}

function revelarAdyacentes(id) {
  const isLeftEdge = (id % ancho === 0);
  const isRightEdge = (id % ancho === ancho - 1);
  const vecinos = [
    id - 1, id + 1, id - ancho, id + ancho, id - ancho - 1, id - ancho + 1, id + ancho - 1, id + ancho + 1
  ];

  vecinos.forEach(vecinoId => {
    if (vecinoId >= 0 && vecinoId < (ancho * ancho)) {
      if ((isLeftEdge && [id - 1, id - ancho - 1, id + ancho - 1].includes(vecinoId)) ||
          (isRightEdge && [id + 1, id - ancho + 1, id + ancho + 1].includes(vecinoId))) {
        return;
      }
      const vecinoCelda = celdas[vecinoId];
      if (!vecinoCelda.classList.contains('revelada') && !vecinoCelda.classList.contains('flagged')) {
        revelarCelda(vecinoCelda);
      }
    }
  });
}

function marcarCelda(celda) {
  if (gameOver) return;
  if (celda.classList.contains('revelada')) return;

  if (!celda.classList.contains('flagged') && banderasRestantes > 0) {
    celda.classList.add('flagged');
    banderasRestantes--;
  } else if (celda.classList.contains('flagged')) {
    celda.classList.remove('flagged');
    banderasRestantes++;
  }
}

function mostrarBombas() {
  celdas.forEach(celda => {
    if (celda.dataset.tipo === 'bomba') {
      celda.classList.add('revelada', 'bomba');
    }
  });
}

function verificarVictoria() {
  const celdasNoBombas = celdas.filter(celda => celda.dataset.tipo === 'valido');
  const celdasReveladasNoBombas = celdasNoBombas.filter(celda => celda.classList.contains('revelada'));

  if (celdasReveladasNoBombas.length === celdasNoBombas.length) {
    statusMessage.textContent = '¡Victoria! 🎉';
    statusMessage.style.color = '#2ecc71';
    gameOver = true;
    mostrarBombas();
  }
}

resetButton.addEventListener('click', crearTablero);
crearTablero();
</tp>
